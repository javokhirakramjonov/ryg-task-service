// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: task.proto

package task_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChallengeService_GetChallengeById_FullMethodName      = "/task_microservice.ChallengeService/GetChallengeById"
	ChallengeService_GetChallengesByUserId_FullMethodName = "/task_microservice.ChallengeService/GetChallengesByUserId"
	ChallengeService_CreateChallenge_FullMethodName       = "/task_microservice.ChallengeService/CreateChallenge"
	ChallengeService_UpdateChallenge_FullMethodName       = "/task_microservice.ChallengeService/UpdateChallenge"
	ChallengeService_DeleteChallenge_FullMethodName       = "/task_microservice.ChallengeService/DeleteChallenge"
	ChallengeService_StartChallenge_FullMethodName        = "/task_microservice.ChallengeService/StartChallenge"
	ChallengeService_FinishChallenge_FullMethodName       = "/task_microservice.ChallengeService/FinishChallenge"
)

// ChallengeServiceClient is the client API for ChallengeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChallengeServiceClient interface {
	GetChallengeById(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*Challenge, error)
	GetChallengesByUserId(ctx context.Context, in *GetChallengesRequest, opts ...grpc.CallOption) (*ChallengeList, error)
	CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...grpc.CallOption) (*Challenge, error)
	UpdateChallenge(ctx context.Context, in *UpdateChallengeRequest, opts ...grpc.CallOption) (*Challenge, error)
	DeleteChallenge(ctx context.Context, in *DeleteChallengeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartChallenge(ctx context.Context, in *StartChallengeRequest, opts ...grpc.CallOption) (*Challenge, error)
	FinishChallenge(ctx context.Context, in *FinishChallengeRequest, opts ...grpc.CallOption) (*Challenge, error)
}

type challengeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChallengeServiceClient(cc grpc.ClientConnInterface) ChallengeServiceClient {
	return &challengeServiceClient{cc}
}

func (c *challengeServiceClient) GetChallengeById(ctx context.Context, in *GetChallengeRequest, opts ...grpc.CallOption) (*Challenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Challenge)
	err := c.cc.Invoke(ctx, ChallengeService_GetChallengeById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) GetChallengesByUserId(ctx context.Context, in *GetChallengesRequest, opts ...grpc.CallOption) (*ChallengeList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChallengeList)
	err := c.cc.Invoke(ctx, ChallengeService_GetChallengesByUserId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) CreateChallenge(ctx context.Context, in *CreateChallengeRequest, opts ...grpc.CallOption) (*Challenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Challenge)
	err := c.cc.Invoke(ctx, ChallengeService_CreateChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) UpdateChallenge(ctx context.Context, in *UpdateChallengeRequest, opts ...grpc.CallOption) (*Challenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Challenge)
	err := c.cc.Invoke(ctx, ChallengeService_UpdateChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) DeleteChallenge(ctx context.Context, in *DeleteChallengeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ChallengeService_DeleteChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) StartChallenge(ctx context.Context, in *StartChallengeRequest, opts ...grpc.CallOption) (*Challenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Challenge)
	err := c.cc.Invoke(ctx, ChallengeService_StartChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *challengeServiceClient) FinishChallenge(ctx context.Context, in *FinishChallengeRequest, opts ...grpc.CallOption) (*Challenge, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Challenge)
	err := c.cc.Invoke(ctx, ChallengeService_FinishChallenge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChallengeServiceServer is the server API for ChallengeService service.
// All implementations must embed UnimplementedChallengeServiceServer
// for forward compatibility.
type ChallengeServiceServer interface {
	GetChallengeById(context.Context, *GetChallengeRequest) (*Challenge, error)
	GetChallengesByUserId(context.Context, *GetChallengesRequest) (*ChallengeList, error)
	CreateChallenge(context.Context, *CreateChallengeRequest) (*Challenge, error)
	UpdateChallenge(context.Context, *UpdateChallengeRequest) (*Challenge, error)
	DeleteChallenge(context.Context, *DeleteChallengeRequest) (*emptypb.Empty, error)
	StartChallenge(context.Context, *StartChallengeRequest) (*Challenge, error)
	FinishChallenge(context.Context, *FinishChallengeRequest) (*Challenge, error)
	mustEmbedUnimplementedChallengeServiceServer()
}

// UnimplementedChallengeServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChallengeServiceServer struct{}

func (UnimplementedChallengeServiceServer) GetChallengeById(context.Context, *GetChallengeRequest) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengeById not implemented")
}
func (UnimplementedChallengeServiceServer) GetChallengesByUserId(context.Context, *GetChallengesRequest) (*ChallengeList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChallengesByUserId not implemented")
}
func (UnimplementedChallengeServiceServer) CreateChallenge(context.Context, *CreateChallengeRequest) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChallenge not implemented")
}
func (UnimplementedChallengeServiceServer) UpdateChallenge(context.Context, *UpdateChallengeRequest) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateChallenge not implemented")
}
func (UnimplementedChallengeServiceServer) DeleteChallenge(context.Context, *DeleteChallengeRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChallenge not implemented")
}
func (UnimplementedChallengeServiceServer) StartChallenge(context.Context, *StartChallengeRequest) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartChallenge not implemented")
}
func (UnimplementedChallengeServiceServer) FinishChallenge(context.Context, *FinishChallengeRequest) (*Challenge, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinishChallenge not implemented")
}
func (UnimplementedChallengeServiceServer) mustEmbedUnimplementedChallengeServiceServer() {}
func (UnimplementedChallengeServiceServer) testEmbeddedByValue()                          {}

// UnsafeChallengeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChallengeServiceServer will
// result in compilation errors.
type UnsafeChallengeServiceServer interface {
	mustEmbedUnimplementedChallengeServiceServer()
}

func RegisterChallengeServiceServer(s grpc.ServiceRegistrar, srv ChallengeServiceServer) {
	// If the following call pancis, it indicates UnimplementedChallengeServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChallengeService_ServiceDesc, srv)
}

func _ChallengeService_GetChallengeById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetChallengeById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetChallengeById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetChallengeById(ctx, req.(*GetChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_GetChallengesByUserId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChallengesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).GetChallengesByUserId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_GetChallengesByUserId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).GetChallengesByUserId(ctx, req.(*GetChallengesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_CreateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).CreateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_CreateChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).CreateChallenge(ctx, req.(*CreateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_UpdateChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).UpdateChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_UpdateChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).UpdateChallenge(ctx, req.(*UpdateChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_DeleteChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).DeleteChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_DeleteChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).DeleteChallenge(ctx, req.(*DeleteChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_StartChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).StartChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_StartChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).StartChallenge(ctx, req.(*StartChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChallengeService_FinishChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChallengeServiceServer).FinishChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ChallengeService_FinishChallenge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChallengeServiceServer).FinishChallenge(ctx, req.(*FinishChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ChallengeService_ServiceDesc is the grpc.ServiceDesc for ChallengeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChallengeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task_microservice.ChallengeService",
	HandlerType: (*ChallengeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChallengeById",
			Handler:    _ChallengeService_GetChallengeById_Handler,
		},
		{
			MethodName: "GetChallengesByUserId",
			Handler:    _ChallengeService_GetChallengesByUserId_Handler,
		},
		{
			MethodName: "CreateChallenge",
			Handler:    _ChallengeService_CreateChallenge_Handler,
		},
		{
			MethodName: "UpdateChallenge",
			Handler:    _ChallengeService_UpdateChallenge_Handler,
		},
		{
			MethodName: "DeleteChallenge",
			Handler:    _ChallengeService_DeleteChallenge_Handler,
		},
		{
			MethodName: "StartChallenge",
			Handler:    _ChallengeService_StartChallenge_Handler,
		},
		{
			MethodName: "FinishChallenge",
			Handler:    _ChallengeService_FinishChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}

const (
	TaskService_GetTasksByChallengeId_FullMethodName        = "/task_microservice.TaskService/GetTasksByChallengeId"
	TaskService_GetTaskById_FullMethodName                  = "/task_microservice.TaskService/GetTaskById"
	TaskService_GetTasksByChallengeIdAndDate_FullMethodName = "/task_microservice.TaskService/GetTasksByChallengeIdAndDate"
	TaskService_CreateTasks_FullMethodName                  = "/task_microservice.TaskService/CreateTasks"
	TaskService_CreateTask_FullMethodName                   = "/task_microservice.TaskService/CreateTask"
	TaskService_UpdateTask_FullMethodName                   = "/task_microservice.TaskService/UpdateTask"
	TaskService_UpdateTaskStatus_FullMethodName             = "/task_microservice.TaskService/UpdateTaskStatus"
	TaskService_DeleteTask_FullMethodName                   = "/task_microservice.TaskService/DeleteTask"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	GetTasksByChallengeId(ctx context.Context, in *GetTasksByChallengeIdRequest, opts ...grpc.CallOption) (*TaskList, error)
	GetTaskById(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error)
	GetTasksByChallengeIdAndDate(ctx context.Context, in *GetTaskByChallengeIdAndDateRequest, opts ...grpc.CallOption) (*TaskWithStatusList, error)
	CreateTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*TaskList, error)
	CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error)
	UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Task, error)
	UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*TaskWithStatus, error)
	DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) GetTasksByChallengeId(ctx context.Context, in *GetTasksByChallengeIdRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, TaskService_GetTasksByChallengeId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTaskById(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_GetTaskById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) GetTasksByChallengeIdAndDate(ctx context.Context, in *GetTaskByChallengeIdAndDateRequest, opts ...grpc.CallOption) (*TaskWithStatusList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskWithStatusList)
	err := c.cc.Invoke(ctx, TaskService_GetTasksByChallengeIdAndDate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateTasks(ctx context.Context, in *CreateTasksRequest, opts ...grpc.CallOption) (*TaskList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskList)
	err := c.cc.Invoke(ctx, TaskService_CreateTasks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateTask(ctx context.Context, in *CreateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_CreateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTask(ctx context.Context, in *UpdateTaskRequest, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, TaskService_UpdateTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) UpdateTaskStatus(ctx context.Context, in *UpdateTaskStatusRequest, opts ...grpc.CallOption) (*TaskWithStatus, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskWithStatus)
	err := c.cc.Invoke(ctx, TaskService_UpdateTaskStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) DeleteTask(ctx context.Context, in *DeleteTaskRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, TaskService_DeleteTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	GetTasksByChallengeId(context.Context, *GetTasksByChallengeIdRequest) (*TaskList, error)
	GetTaskById(context.Context, *GetTaskRequest) (*Task, error)
	GetTasksByChallengeIdAndDate(context.Context, *GetTaskByChallengeIdAndDateRequest) (*TaskWithStatusList, error)
	CreateTasks(context.Context, *CreateTasksRequest) (*TaskList, error)
	CreateTask(context.Context, *CreateTaskRequest) (*Task, error)
	UpdateTask(context.Context, *UpdateTaskRequest) (*Task, error)
	UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*TaskWithStatus, error)
	DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) GetTasksByChallengeId(context.Context, *GetTasksByChallengeIdRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksByChallengeId not implemented")
}
func (UnimplementedTaskServiceServer) GetTaskById(context.Context, *GetTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTaskById not implemented")
}
func (UnimplementedTaskServiceServer) GetTasksByChallengeIdAndDate(context.Context, *GetTaskByChallengeIdAndDateRequest) (*TaskWithStatusList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasksByChallengeIdAndDate not implemented")
}
func (UnimplementedTaskServiceServer) CreateTasks(context.Context, *CreateTasksRequest) (*TaskList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTasks not implemented")
}
func (UnimplementedTaskServiceServer) CreateTask(context.Context, *CreateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTask not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTask(context.Context, *UpdateTaskRequest) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTask not implemented")
}
func (UnimplementedTaskServiceServer) UpdateTaskStatus(context.Context, *UpdateTaskStatusRequest) (*TaskWithStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTaskStatus not implemented")
}
func (UnimplementedTaskServiceServer) DeleteTask(context.Context, *DeleteTaskRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTask not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_GetTasksByChallengeId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTasksByChallengeIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasksByChallengeId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTasksByChallengeId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasksByChallengeId(ctx, req.(*GetTasksByChallengeIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTaskById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTaskById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTaskById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTaskById(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_GetTasksByChallengeIdAndDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskByChallengeIdAndDateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).GetTasksByChallengeIdAndDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_GetTasksByChallengeIdAndDate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).GetTasksByChallengeIdAndDate(ctx, req.(*GetTaskByChallengeIdAndDateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTasks(ctx, req.(*CreateTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateTask(ctx, req.(*CreateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTask(ctx, req.(*UpdateTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_UpdateTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).UpdateTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_UpdateTaskStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).UpdateTaskStatus(ctx, req.(*UpdateTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_DeleteTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).DeleteTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_DeleteTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).DeleteTask(ctx, req.(*DeleteTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "task_microservice.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasksByChallengeId",
			Handler:    _TaskService_GetTasksByChallengeId_Handler,
		},
		{
			MethodName: "GetTaskById",
			Handler:    _TaskService_GetTaskById_Handler,
		},
		{
			MethodName: "GetTasksByChallengeIdAndDate",
			Handler:    _TaskService_GetTasksByChallengeIdAndDate_Handler,
		},
		{
			MethodName: "CreateTasks",
			Handler:    _TaskService_CreateTasks_Handler,
		},
		{
			MethodName: "CreateTask",
			Handler:    _TaskService_CreateTask_Handler,
		},
		{
			MethodName: "UpdateTask",
			Handler:    _TaskService_UpdateTask_Handler,
		},
		{
			MethodName: "UpdateTaskStatus",
			Handler:    _TaskService_UpdateTaskStatus_Handler,
		},
		{
			MethodName: "DeleteTask",
			Handler:    _TaskService_DeleteTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task.proto",
}
